///////////////////////////////////////////////////////////////////////////////
// AbortProcess

#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <process.h>
#include <time.h>

//==========================================================================================
extern "C"
{

#include <Kutlstr.h>
#include <Kutltime.h>
#include "cimseqnc.h"
#include "iodefine.h"

} // End of [extern "C"]
//==========================================================================================

//------------------------------------------------------------------------------------------

#define FUNC_NAME	"PM2-AbortProcess"

//------------------------------------------------------------------------------------------
// Alarm Definition(  )

//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

IO_Name_String_Map IO_STR_Map_Table[] = {
	{ "PM2.PRO_RunStsDM"	, _K_D_IO	,	PRO_RunStsDM,	0	} ,
	""
};

//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
// SubFunc

void AbortProcess()
{
	int nIOStatus;
	int nPRO_RunStsDM;

	// PRO_RunStsDM => 0:Stop, 1:Running
	nPRO_RunStsDM = READ_DIGITAL(PRO_RunStsDM, &nIOStatus);
	if(nPRO_RunStsDM == 0) WAIT_SECONDS(5);
	WRITE_DIGITAL(PRO_RunStsDM, 0, &nIOStatus);
}

//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

//==========================================================================================
extern "C"
{

Module_Status Program_Main() {
	Module_Status msRet = SYS_SUCCESS;
	int nParLen = 0;
	char *pParam;
//	char szCmd[41], szSubParam[256];

	printf("Entered %s\n", FUNC_NAME);
	do {
		pParam = PROGRAM_PARAMETER_READ();
		nParLen = strlen(pParam);

		AbortProcess();

		/*
		if(nParLen <= 0)
		{
			// msRet = SubFunc(szSubParam);
		}
		else
		{
			STR_SEPERATE(pParam , szCmd, szSubParam, 255 );
			// msRet = SubFunc(szSubParam);
		}
		*/
	} while(0);

	printf("Leaved %s\n", FUNC_NAME);
	return msRet;
}

//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------

void Event_Message_Received() {
}

} // End of [extern "C"]
//==========================================================================================
